version: "3.7"
services:

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - app-tier
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: localhost
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-tier
    depends_on:
      - zookeeper

  database:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: pizza_online
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    depends_on:
      - kafka
    ports:
      - 5416:5433
    expose:
      - 5433
    command: -p 5433
#    volumes:
#      - postgres_data:/var/lib/postgres/data
    networks:
      - app-tier

  keycloak-database:
    image: postgres:latest
    container_name: keycloak-database
    volumes:
      - keycloak_postgres_data:/var/lib/postgres_keycloak/data
    environment:
      POSTGRES_DB: pizza-online-auth
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    depends_on:
      - kafka
    ports:
      - 5417:5434
    expose:
      - 5434
    command:
      -p 5434
    networks:
      - app-tier

  authorization:
    image: jboss/keycloak:8.0.2
    container_name: keycloak
    ports:
      - 8080:8080
    depends_on:
      - keycloak-database
    environment:
      DB_VENDOR: "POSTGRES"
      DB_ADDR: keycloak-database
      DB_DATABASE: pizza-online-auth
      DB_PORT: 5434
      DB_USER: user
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
    restart: on-failure
    volumes:
      - keycloak_data:/var/lib/keycloak/data
    networks:
      - app-tier

  frontend:
#    image: stea1th/pizza-ang:latest
    build: ./angular/src/main/angular-app
    container_name: angular
    depends_on:
      - authorization
    ports:
      - 90:80
    networks:
      - app-tier

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/config:/prometheus
      - ./prometheus/data/prometheus:/data
    command:
      - '--config.file=/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/data'
    ports:
      - 9090:9090
#    depends_on:
#      - alertmanager
#    restart: always
    networks:
      - app-tier

  grafana:
    image: grafana/grafana
    container_name: grafana
#    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - app-tier

  sonarqube-database:
    image: bitnami/postgresql:latest
    container_name: sonarqube-database
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USER=user
      - POSTGRESQL_DATABASE=sonarqube_database
      - POSTGRESQL_PASSWORD=password
    volumes:
      - sonarqube_postgres_data:/var/lib/bitnami
    networks:
      - solar-net

#  sonarqube:
#    image: bitnami/sonarqube:latest
#    container_name: sonarqube
#    depends_on:
#      - sonarqube-database
#    ports:
#      - 9000:9000
#    environment:
#      - POSTGRESQL_HOST=sonarqube-database
#      - POSTGRESQL_ROOT_USER=postgres
#      - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=sonarqube_database
#      - POSTGRESQL_CLIENT_CREATE_DATABASE_USERNAME=user
#      - POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD=password
#      - SONARQUBE_DATABASE_USER=user
#      - SONARQUBE_DATABASE_NAME=sonarqube_database
#      - SONARQUBE_DATABASE_PASSWORD=password
#      - ALLOW_EMPTY_PASSWORD=yes
#    volumes:
#      - sonarqube_data:/bitnami
#    networks:
#      - app-tier

#  sonarqube-database:
#    image: postgres:latest
#    container_name: sonarqube-database
#    volumes:
#      - sonarqube_data:/var/lib/sonarqube
#      - sonarqube_data:/var/lib/sonarqube/data
#    environment:
#      POSTGRES_DB: sonarqube
#      POSTGRES_USER: user
#      POSTGRES_PASSWORD: password
#    ports:
#      - 5418:5434
#    expose:
#      - 5434
#    command:
#      -p 5434
#    networks:
#      - app-tier
#
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    depends_on:
      - sonarqube-database
    ports:
      - 9000:9000
    environment:
      - sonar.jdbc.url=jdbc:postgresql://sonarqube-database:5432/sonarqube_database
      - sonar.jdbc.username=user
      - sonar.jdbc.password=password
      - sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false
    volumes:
      - sonarqube_data:/opt/sonarqube/logs
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_data:/opt/sonarqube/extensions
    networks:
      - solar-net


#  Passing Spring Profile in DockerCompose
#  rest-api:
#    image: rest-api:0.0.1
#    ports:
#      - "8080:8080"
#    environment:
#      - "SPRING_PROFILES_ACTIVE=docker"

networks:
  app-tier:
    driver: bridge
  solar-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  keycloak_postgres_data:
    driver: local
  keycloak_data:
    driver: local
  grafana_data: {}
  sonarqube_postgres_data:
    driver: local
  sonarqube_data:
    driver: local
#    external: true
